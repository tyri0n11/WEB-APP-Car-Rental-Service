enum Role {
    ADMIN
    CUSTOMER
}

enum ActionType {
    VIEW_CAR
    SEARCH
    ADD_TO_FAVORITES
    BOOK_CAR
    CANCEL_BOOKING
    FILTER_APPLY
}

model User {
    id               String           @id @default(uuid())
    email            String           @unique
    password         String
    firstName        String
    lastName         String
    phoneNumber      String?
    isVerified       Boolean          @default(false)
    role             Role             @default(CUSTOMER)
    drivingLicence   DrivingLicence?  @relation(fields: [drivingLicenceId], references: [id], onDelete: Cascade)
    bookings         Booking[]
    drivingLicenceId String?          @unique
    userActions      UserAction[]
    userPreferences  UserPreference[]
    favoriteCars     FavoriteCar[]
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt

    @@map("users")
}

model DrivingLicence {
    id                   String   @id @default(uuid())
    licenceNumber        String
    drivingLicenseImages String[]
    expiryDate           DateTime
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    user                 User?

    @@map("driving_licences")
}

model FavoriteCar {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
    carId     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, carId])
    @@map("favorite_cars")
}

// users' action for recommendation system
model UserAction {
    id         String     @id @default(uuid())
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    car        Car        @relation(fields: [carId], references: [id], onDelete: Cascade)
    carId      String
    actionType ActionType
    metadata   Json?
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt

    @@map("user_actions")
}

model UserPreference {
    id         String   @id @default(uuid())
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    preference String // e.g., "fuelType:ELECTRIC", "make:Toyota"
    weight     Float // Strength of preference (0-1)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([userId, preference])
    @@map("user_preferences")
}
