enum CarStatus {
    AVAILABLE
    RENTED
}

model Car {
    id            String        @id @default(uuid())
    make          String
    model         String
    year          Int
    mileage       Int
    description   String
    dailyPrice    Float
    licensePlate  String
    status        CarStatus     @default(AVAILABLE)
    carCategories CarCategory[]
    reviews       Review[]
    images        CarImage[]
    bookings      Booking[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    @@map("cars")
}

model CarImage {
    id        String   @id @default(uuid())
    url       String
    car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
    carId     String
    isMain    Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("car_images")
}

model Category {
    id            String        @id @default(uuid())
    name          String
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    carCategories CarCategory[]

    @@map("categories")
}

model CarCategory {
    id         String   @id @default(uuid())
    car        Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
    carId      String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("car_categories")
}

model Review {
    id        String   @id @default(uuid())
    rating    Int
    comment   String?
    booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    bookingId String   @unique
    userName  String
    car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
    carId     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("reviews")
}
