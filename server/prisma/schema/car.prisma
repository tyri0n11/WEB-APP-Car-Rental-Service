enum CarStatus {
    AVAILABLE
    RENTED
}

enum FuelType {
    DIESEL
    PETROL
    ELECTRIC
    HYBRID
}

model Car {
    id           String        @id @default(uuid())
    make         String
    model        String
    year         Int
    kilometers   Int
    description  String
    dailyPrice   Float
    licensePlate String        @unique
    numSeats     Int
    address      String
    autoGearbox  Boolean
    rating       Float         @default(0)
    fuelType     FuelType
    status       CarStatus     @default(AVAILABLE)
    categories   CarCategory[]
    reviews      Review[]
    images       CarImage[]
    bookings     Booking[]
    favoritedBy  FavoriteCar[]
    userActions  UserAction[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt

    @@map("cars")
}

model CarImage {
    id        String   @id @default(uuid())
    url       String
    car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
    carId     String
    isMain    Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([carId, url])
    @@map("car_images")
}

model Category {
    id            String        @id @default(uuid())
    name          String        @unique
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    carCategories CarCategory[]

    @@map("categories")
}

model CarCategory {
    id         String   @id @default(uuid())
    car        Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
    carId      String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([carId, categoryId])
    @@map("car_categories")
}

model Review {
    id        String   @id @default(uuid())
    rating    Int
    comment   String?
    booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    bookingId String   @unique
    userId    String
    userName  String
    car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
    carId     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("reviews")
}
